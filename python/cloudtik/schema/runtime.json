{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "http://cloudtik.com/schema/runtime.json",
	"description": "CloudTik runtime configuration schema",
    "type": "object",
    "definitions": {
        "service_selector": {
            "type": "object",
            "description": "Defines a series match conditions of services",
            "properties": {
                "services": {
                    "type": "array",
                    "description": "The services to discover. If not specified, match to all the services.",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "description": "The tags to match for the services. All tags must match",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "description": "The labels to match for the services. All labels must match",
                    "patternProperties": {
                        ".*":{
                            "type": "string"
                        }
                    }
                },
                "runtimes": {
                    "type": "array",
                    "description": "Services of any of the runtimes.",
                    "items": {
                        "type": "string"
                    }
                },
                "clusters": {
                    "type": "array",
                    "description": "Services of any of the clusters.",
                    "items": {
                        "type": "string"
                    }
                },
                "exclude_labels": {
                    "type": "object",
                    "description": "The labels to exclude for the services. Be excluded if include any these labels.",
                    "patternProperties": {
                        ".*":{
                            "type": "string"
                        }
                    }
                },
                "exclude_joined_labels": {
                    "type": "array",
                    "description": "A list of joined labels to exclude for the services.",
                    "items": {
                        "type": "object",
                        "description": "The labels to exclude for the services. All the labels must match to be excluded.",
                        "patternProperties": {
                            ".*":{
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "database_connect": {
            "type": "object",
            "description": "Database parameters for connect to an existing database.",
            "additionalProperties": true,
            "properties": {
                "engine": {
                    "type": "string",
                    "description": "Database engine: mysql or postgres."
                },
                "address": {
                    "type": "string",
                    "description": "Database server address"
                },
                "port": {
                    "type": "number",
                    "description": "Database server port. default: mysql=3306, postgres=5432"
                },
                "username": {
                    "type": "string",
                    "description": "Database administrator login name. default: cloudtik"
                },
                "password": {
                    "type": "string",
                    "description": "Database administrator login password."
                }
            }
        }
    },
    "additionalProperties": true,
    "properties": {
        "types": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "The list of runtimes to enable for this cluster"
        },
        "envs": {
            "type": "object",
            "patternProperties": {
                ".*":{
                    "type": "string"
                }
            }
        },
        "scaling:": {
            "type": "object",
            "description": "User scaling configurations",
            "additionalProperties": true,
            "properties": {
                "scaling_policy": {
                    "type": "string",
                    "description": "The built-in scaling policy name to use. Values: scaling-with-load, scaling-with-time"
                },
                "scaling_step": {
                    "type": "integer",
                    "default": 1,
                    "description": "The number of nodes for each scale up step."
                },
                "scaling_resource": {
                    "type": "string",
                    "default": "CPU",
                    "description": "The resource type to check for scale: CPU or memory"
                },
                "cpu_load_threshold": {
                    "type": "number",
                    "default": 0.85,
                    "description": "The cpu load threshold to start scale"
                },
                "memory_load_threshold": {
                    "type": "number",
                    "default": 0.85,
                    "description": "The memory load threshold to start scale"
                },
                "in_use_cpu_load_threshold": {
                    "type": "number",
                    "default": 0.10,
                    "description": "The minimum cpu load to consider the machine is in use"
                },
                "scaling_periodic": {
                    "type": "string",
                    "default": "daily",
                    "description": "The periodic to use for scaling with time policy. Values: daily, weekly, monthly"
                },
                "scaling_math_base": {
                    "type": "string",
                    "default": "on-min-workers",
                    "description": "The base number to use for arithmetic such as *2. Values: on-min-workers, on-previous-time"
                },
                "scaling_policy_class": {
                    "type": "string",
                    "description": "The module and class path of the scaling policy class"
                }
            }
        },
        "spark": {
            "type": "object",
            "description": "Spark runtime configurations",
            "additionalProperties": true,
            "properties": {
                "config": {
                    "type": "object",
                    "description": "Map of spark configurations, e.g. {\"spark.executor.cores\": \"45\"}"
                },
                "scaling:": {
                    "type": "object",
                    "description": "Spark scaling configurations",
                    "additionalProperties": true,
                    "properties": {
                        "scaling_mode": {
                            "type": "string",
                            "description": "The Spark scaling mode. Values: apps-pending, aggressive"
                        },
                        "scaling_step": {
                            "type": "integer",
                            "default": 1,
                            "description": "The number of nodes for each scale up step."
                        },
                        "scaling_resource": {
                            "type": "string",
                            "default": "memory",
                            "description": "The resource type to check for scale: CPU or memory"
                        },
                        "apps_pending_threshold": {
                            "type": "integer",
                            "default": 1,
                            "description": "The number of pending apps threshold to trigger scaling."
                        },
                        "apps_pending_free_cores_threshold": {
                            "type": "integer",
                            "default": 4,
                            "description": "The number of free cores threshold below which to trigger scaling."
                        },
                        "apps_pending_free_memory_threshold": {
                            "type": "integer",
                            "default": 1024,
                            "description": "The size of free memory threshold in MB below which to trigger scaling."
                        },
                        "aggressive_free_ratio_threshold": {
                            "type": "number",
                            "default": 0.1,
                            "description": "The free cpu or memory ratio below which to trigger scaling for aggressive mode."
                        }
                    }
                },
                "hadoop_default_cluster": {
                    "type": "boolean",
                    "description": "Whether to set Hadoop default to cluster storage if available.",
                    "default": false
                },
                "hdfs_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use HDFS service in the same workspace.",
                    "default": false
                },
                "hdfs_service_selector": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for HDFS service if service discovery is enabled."
                },
                "hdfs_namenode_uri": {
                    "type": "string",
                    "description": "HDFS service endpoint if Spark need to access HDFS."
                },
                "hdfs_mount_method": {
                    "type": "string",
                    "description": "HDFS mount method: nfs or fuse. Default fuse if not specified."
                },
                "metastore_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use metastore service in the same workspace.",
                    "default": true
                },
                "metastore_service_selector": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for Metastore service if service discovery is enabled."
                },
                "hive_metastore_uri": {
                    "type": "string",
                    "description": "Metastore service endpoint for Spark to use."
                },
                "yarn_resource_memory_ratio": {
                    "type": "number",
                    "description": "The yarn node virtual memory ratio vs the available physical memory."
                },
                "yarn_scheduler": {
                    "type": "string",
                    "description": "The yarn scheduler to use: capacity or fair"
                }
            }
        },
        "ai": {
            "type": "object",
            "description": "AI runtime configurations",
            "additionalProperties": true,
            "properties": {
                "with_oneapi": {
                    "type": "boolean",
                    "description": "Whether to use oneAPI frameworks and libraries for AI"
                },
                "with_intel_mpi": {
                    "type": "boolean",
                    "description": "Whether to use Intel MPI. If with_oneapi is set, this is default true"
                },
                "with_oneccl": {
                    "type": "boolean",
                    "description": "Whether to use oneCCL. If with_oneapi is set, this is default true"
                },
                "with_intel_pytorch": {
                    "type": "boolean",
                    "description": "Whether to use Intel Optimizations of PyTorch. If with_oneapi is set, this is default true"
                },
                "with_gpu": {
                    "type": "boolean",
                    "description": "Whether to use GPU frameworks and libraries for AI"
                },
                "database": {
                    "$ref": "#/definitions/database_connect",
                    "description": "The database parameters. Engine, address, port are optional if using service discovery."
                },
                "database_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use database service in the same workspace.",
                    "default": true
                },
                "database_service_selector": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for database service if service discovery is enabled."
                }
            }
        },
        "ray": {
            "type": "object",
            "description": "Ray runtime configurations",
            "additionalProperties": true,
            "properties": {
                "scaling:": {
                    "type": "object",
                    "description": "Ray scaling configurations",
                    "additionalProperties": true,
                    "properties": {
                        "auto_scaling": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to enable ray based auto scaling"
                        }
                    }
                }
            }
        },
        "flink": {
            "type": "object",
            "description": "Flink runtime configurations",
            "additionalProperties": true,
            "properties": {
                "config": {
                    "type": "object",
                    "description": "Map of flink configurations"
                },
                "scaling:": {
                    "type": "object",
                    "description": "Flink scaling configurations",
                    "additionalProperties": true,
                    "properties": {
                        "scaling_mode": {
                            "type": "string",
                            "description": "The scaling mode. Values: apps-pending, aggressive"
                        },
                        "scaling_step": {
                            "type": "integer",
                            "default": 1,
                            "description": "The number of nodes for each scale up step."
                        },
                        "scaling_resource": {
                            "type": "string",
                            "default": "memory",
                            "description": "The resource type to check for scale: CPU or memory"
                        },
                        "apps_pending_threshold": {
                            "type": "integer",
                            "default": 1,
                            "description": "The number of pending apps threshold to trigger scaling."
                        },
                        "apps_pending_free_cores_threshold": {
                            "type": "integer",
                            "default": 4,
                            "description": "The number of free cores threshold below which to trigger scaling."
                        },
                        "apps_pending_free_memory_threshold": {
                            "type": "integer",
                            "default": 1024,
                            "description": "The size of free memory threshold in MB below which to trigger scaling."
                        },
                        "aggressive_free_ratio_threshold": {
                            "type": "number",
                            "default": 0.1,
                            "description": "The free cpu or memory ratio below which to trigger scaling for aggressive mode."
                        }
                    }
                },
                "hadoop_default_cluster": {
                    "type": "boolean",
                    "description": "Whether to set Hadoop default to cluster storage if available.",
                    "default": false
                },
                "hdfs_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use HDFS service in the same workspace.",
                    "default": false
                },
                "hdfs_namenode_uri": {
                    "type": "string",
                    "description": "HDFS service endpoint if Flink need to access HDFS."
                },
                "metastore_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use metastore service in the same workspace.",
                    "default": true
                },
                "hive_metastore_uri": {
                    "type": "string",
                    "description": "Metastore service endpoint for Flink to use."
                },
                "yarn_resource_memory_ratio": {
                    "type": "number",
                    "description": "The yarn node virtual memory ratio vs the available physical memory."
                },
                "yarn_scheduler": {
                    "type": "string",
                    "description": "The yarn scheduler to use: capacity or fair"
                }
            }
        },
        "metastore": {
            "type": "object",
            "description": "Metastore runtime configurations",
            "additionalProperties": true,
            "properties": {
                "database": {
                    "$ref": "#/definitions/database_connect",
                    "description": "The database parameters. Engine, address, port are optional if using service discovery."
                },
                "database_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use database service in the same workspace.",
                    "default": true
                },
                "database_service_selector": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for database service if service discovery is enabled."
                },
                "high_availability": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to run a server on each node for high availability."
                }
            }
        },
        "hdfs": {
            "type": "object",
            "description": "HDFS runtime configurations",
            "additionalProperties": true,
            "properties": {
                "force_clean": {
                    "type": "boolean",
                    "description": "Whether to force clean the data directory when starting.",
                    "default": false
                }
            }
        },
        "kafka": {
            "type": "object",
            "description": "Kafka runtime configurations",
            "additionalProperties": true,
            "properties": {
                "config": {
                    "type": "object",
                    "description": "Map of Kafka server properties."
                },
                "zookeeper_connect": {
                    "type": "string",
                    "description": "Zookeeper servers to use for Kafka."
                },
                "zookeeper_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use zookeeper service in the same workspace.",
                    "default": true
                },
                "zookeeper_service_selector": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for Zookeeper service if service discovery is enabled."
                }
            }
        },
        "zookeeper": {
            "type": "object",
            "description": "Zookeeper runtime configurations",
            "additionalProperties": true,
            "properties": {
                "config": {
                    "type": "object",
                    "description": "Map of Zookeeper server properties."
                }
            }
        },
        "presto": {
            "type": "object",
            "description": "Presto runtime configurations",
            "additionalProperties": true,
            "properties": {
                "config": {
                    "type": "object",
                    "description": "Map of Presto server properties."
                },
                "catalogs": {
                    "type": "object",
                    "description": "Presto catalogs to be configured."
                },
                "metastore_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use metastore service in the same workspace.",
                    "default": true
                },
                "metastore_service_selector": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for Metastore service if service discovery is enabled."
                },
                "hive_metastore_uri": {
                    "type": "string",
                    "description": "Explicit Metastore service endpoint for Presto to use."
                }
            }
        },
        "trino": {
            "type": "object",
            "description": "Trino runtime configurations",
            "additionalProperties": true,
            "properties": {
                "catalogs": {
                    "type": "object",
                    "description": "Trino catalogs to be configured."
                },
                "metastore_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use metastore service in the same workspace.",
                    "default": true
                },
                "metastore_service_selector": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for Metastore service if service discovery is enabled."
                },
                "hive_metastore_uri": {
                    "type": "string",
                    "description": "Explicit Metastore service endpoint for Trino to use."
                }
            }
        },
        "sshserver": {
            "type": "object",
            "description": "SSH Server runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 22022,
                    "description": "The SSH Server port."
                }
            }
        },
        "consul": {
            "type": "object",
            "description": "Consul runtime configurations",
            "additionalProperties": true,
            "properties": {
                "server": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the cluster with Consul runs with Consul server or client agent."
                },
                "data_center": {
                    "type": "string",
                    "description": "Override Consul data center name. By default is the workspace name."
                }
            }
        },
        "prometheus": {
            "type": "object",
            "description": "Prometheus runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 9090,
                    "description": "Prometheus server port."
                },
                "high_availability": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to run a server on each node for high availability. Each server will scrape the same set of targets"
                },
                "scrape_scope": {
                    "type": "string",
                    "default": "local",
                    "description": "The scrape scope for this server: local, workspace or federation."
                },
                "scrape_services": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for services to scrape."
                },
                "federation_targets": {
                    "type": "array",
                    "description": "The Prometheus targets for federation to use if no service discovery deployed",
                    "items": {
                        "type": "object",
                        "required": [
                            "targets"
                        ],
                        "properties": {
                            "targets": {
                                "type": "array",
                                "description": "The list of targets."
                            },
                            "labels": {
                                "type": "object",
                                "description": "The optional labels to add for the targets",
                                "patternProperties": {
                                    ".*":{
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "node_exporter": {
            "type": "object",
            "description": "Prometheus node exporter runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 9100,
                    "description": "Prometheus node exporter port."
                }
            }
        },
        "grafana": {
            "type": "object",
            "description": "Grafana runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 3000,
                    "description": "Grafana server port."
                },
                "high_availability": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to run a server on each node for high availability."
                },
                "data_sources_scope": {
                    "type": "string",
                    "default": "local",
                    "description": "The data sources scope from which to configure this server: local or workspace."
                },
                "data_sources": {
                    "type": "array",
                    "description": "Array of static data sources to be configured.",
                    "items": {
                        "type": "object",
                        "description": "Grafana data source definition."
                    }
                },
                "data_sources_services": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for workspace services as data sources."
                }
            }
        },
        "haproxy": {
            "type": "object",
            "description": "HAProxy runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 80,
                    "description": "The frontend server port."
                },
                "protocol": {
                    "type": "string",
                    "default": "tcp",
                    "description": "The frontend protocol: tcp or http."
                },
                "app_mode": {
                    "type": "string",
                    "default": "load-balancer",
                    "description": "The application mode: load-balancer or api-gateway."
                },
                "high_availability": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to run a server on each node for high availability."
                },
                "backend": {
                    "type": "object",
                    "description": "Backend configurations",
                    "properties": {
                        "config_mode": {
                            "type": "string",
                            "default": "dynamic",
                            "description": "How the backend is configured: dns, static, dynamic"
                        },
                        "balance": {
                            "type": "string",
                            "default": "roundrobin",
                            "description": "The backend balance algorithm and arguments: roundrobin, leastconn, first, random, hash and so."
                        },
                        "max_servers": {
                            "type": "integer",
                            "default": 128,
                            "description": "The max number of servers. This is needed only for HAProxy server template."
                        },
                        "selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for services for the backend."
                        },
                        "service_name": {
                            "type": "string",
                            "description": "The service name used for DNS discovery."
                        },
                        "service_tag": {
                            "type": "string",
                            "description": "The service tag used for DNS discovery."
                        },
                        "service_cluster": {
                            "type": "string",
                            "description": "The cluster of the service. Service tag and service cluster are exclusive."
                        },
                        "servers": {
                            "type": "array",
                            "description": "Array of static servers for the backend.",
                            "items": {
                                "type": "string",
                                "description": "Server entry in format: host:port."
                            }
                        },
                        "session_persistence": {
                            "type": "string",
                            "default": "none",
                            "description": "The session persistence method: none, cookie or ip"
                        }
                    }
                }
            }
        },
        "nginx": {
            "type": "object",
            "description": "NGINX runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 80,
                    "description": "The server listen port."
                },
                "app_mode": {
                    "type": "string",
                    "default": "load-balancer",
                    "description": "The application mode: web, load-balancer or api-gateway."
                },
                "high_availability": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to run a server on each node for high availability."
                },
                "backend": {
                    "type": "object",
                    "description": "Backend configurations",
                    "properties": {
                        "config_mode": {
                            "type": "string",
                            "default": "dns",
                            "description": "How the backend is configured: dns, static, dynamic"
                        },
                        "balance": {
                            "type": "string",
                            "default": "round_robin",
                            "description": "The backend balance algorithm and arguments: round_robin, least_conn, random, ip_hash or hash."
                        },
                        "selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for services for the backend."
                        },
                        "service_name": {
                            "type": "string",
                            "description": "The service name used for DNS discovery."
                        },
                        "service_port": {
                            "type": "integer",
                            "default": 80,
                            "description": "The service port of the backend."
                        },
                        "service_tag": {
                            "type": "string",
                            "description": "The service tag used for DNS discovery."
                        },
                        "service_cluster": {
                            "type": "string",
                            "description": "The cluster of the service. Service tag and service cluster are exclusive."
                        },
                        "servers": {
                            "type": "array",
                            "description": "Array of static servers for the backend.",
                            "items": {
                                "type": "string",
                                "description": "Server entry in format: host:port."
                            }
                        }
                    }
                }
            }
        },
        "mysql": {
            "type": "object",
            "description": "MySQL runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 3306,
                    "description": "The MySQL server port."
                },
                "high_availability": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to run a server on each node for high availability."
                },
                "root_password": {
                    "type": "string",
                    "default": "cloudtik",
                    "description": "Specify the root user password when initializing the MySQL instance."
                },
                "database": {
                    "type": "object",
                    "description": "Database configurations",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The name of the database to create at the initializing process."
                        },
                        "user": {
                            "type": "string",
                            "description": "The user to create and grant access for the database at the initializing process"
                        },
                        "password": {
                            "type": "string",
                            "description": "The password for the user set at the initializing process."
                        }
                    }
                }
            }
        },
        "postgres": {
            "type": "object",
            "description": "Postgres runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 5432,
                    "description": "Postgres server port."
                },
                "high_availability": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to run a server on each node for high availability."
                },
                "admin_user": {
                    "type": "string",
                    "default": "cloudtik",
                    "description": "Specify the admin username when initializing the MySQL instance."
                },
                "admin_password": {
                    "type": "string",
                    "default": "cloudtik",
                    "description": "Specify the admin password when initializing the MySQL instance."
                },
                "database": {
                    "type": "object",
                    "description": "Database configurations",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Database to create at the initializing process."
                        },
                        "user": {
                            "type": "string",
                            "description": "The user to create and grant access for the database at the initializing process"
                        },
                        "password": {
                            "type": "string",
                            "description": "The password for the user set at the initializing process."
                        }
                    }
                }
            }
        },
        "dnsmasq": {
            "type": "object",
            "description": "Dnsmasq runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 53,
                    "description": "DNS server port."
                },
                "default_resolver": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to set this DNS server as the system default resolver in /etc/resolv.conf."
                }
            }
        },
        "coredns": {
            "type": "object",
            "description": "CoreDNS runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 53,
                    "description": "DNS server port."
                },
                "default_resolver": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to set this DNS server as the system default resolver in /etc/resolv.conf."
                }
            }
        },
        "bind": {
            "type": "object",
            "description": "Bind (Named) runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 53,
                    "description": "DNS server port."
                },
                "dnssec_validation": {
                    "type": "string",
                    "default": "yes",
                    "description": "The DNSSEC validation setting: yes, auto, no."
                },
                "default_resolver": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to set this DNS server as the system default resolver in /etc/resolv.conf."
                }
            }
        },
        "apisix": {
            "type": "object",
            "description": "APISIX runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 9080,
                    "description": "APISIX server port."
                },
                "admin_port": {
                    "type": "integer",
                    "default": 9180,
                    "description": "APISIX admin port."
                },
                "etcd_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use ETCD service in the same workspace.",
                    "default": true
                },
                "etcd_service_selector": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for Metastore service if service discovery is enabled."
                },
                "etcd_uri": {
                    "type": "string",
                    "description": "Explicit set ETCD service to use."
                }
            }
        },
        "kong": {
            "type": "object",
            "description": "Kong runtime configurations",
            "additionalProperties": true,
            "properties": {
                "port": {
                    "type": "integer",
                    "default": 8000,
                    "description": "Kong service port."
                },
                "ssl_port": {
                    "type": "integer",
                    "default": 8443,
                    "description": "Kong service SSL port."
                },
                "database": {
                    "$ref": "#/definitions/database_connect",
                    "description": "The database parameters. Engine, address, port are optional if using service discovery."
                },
                "database_service_discovery": {
                    "type": "boolean",
                    "description": "Whether to discover and use database service in the same workspace.",
                    "default": true
                },
                "database_service_selector": {
                    "$ref": "#/definitions/service_selector",
                    "description": "The selector for database service if service discovery is enabled."
                }
            }
        }
    }
}
