import logging
from typing import Any, Dict

from cloudtik.core._private.runtime_factory import BUILT_IN_RUNTIME_NONE, BUILT_IN_RUNTIME_CONSUL
from cloudtik.core.node_provider import NodeProvider
from cloudtik.runtime.common.runtime_base import RuntimeBase
from cloudtik.runtime.dnsmasq.utils import _get_runtime_processes, \
    _get_runtime_services, _with_runtime_environment_variables

logger = logging.getLogger(__name__)


class DnsmasqRuntime(RuntimeBase):
    """Implementation for Dnsmasq Runtime for a DNS forwarder
    which resolves domain names for both local and upstream

    There a few things to note:
    1. When runs in container, the resolv.conf the container gets
    is different depends on the docker network mode.
    a. For network mode of host, it gets the copy of the resolv.conf of the host.
    This resolv.conf may be auto-generated by systemd-resolved
    (/run/systemd/resolve/stub-resolv.conf) and points to the loopback DNS service
    provided by systemd (127.0.0.53).
    b. For network mode bridge, it gets the original resolv.conf which is
    systemd-resolved's upstream conf (/run/systemd/resolve/resolv.conf).
    Because the loopback DNS service is not available in the container in the bridge mode.

    For both of the cases for container, the resolv.conf is the copy and is not updated
    with host resolv.conf if it changes. So we can chain by update resolv.conf and use
    the original resolv.conf as upstream resolv.conf.
    2. If not in container, it should take care of the behaviour of systemd-resolved.
    We should not directly update the resolv.conf for chaining, because it will be
    overwritten by systemd-resolved. Instead, we should configure systemd-resolved for
    forwarding to our DNS address.

    The simple thing is to add the following settings to your resolved configuration file
    and restart the systemd-resolved (systemctl restart systemd-resolved)
    Directly in /etc/systemd/resolved.conf or a separate file /etc/systemd/resolved.conf.d/my-dns.conf
    [Resolve]
    DNS=127.0.0.1
    DNSSEC=false
    Domains=~cloudtik

    While for systemd version 246 and newer, it allows to specify the DNS port directly in
    the systemd-resolved configuration file. So an intermediate DNS forward like dnsmasq may
    not be needed.
    For example, in /etc/systemd/resolved.conf.d/consul.conf
    [Resolve]
    DNS=127.0.0.1:8600
    DNSSEC=false
    Domains=~cloudtik
    """

    def __init__(self, runtime_config: Dict[str, Any]) -> None:
        super().__init__(runtime_config)

    def with_environment_variables(
            self, config: Dict[str, Any], provider: NodeProvider,
            node_id: str) -> Dict[str, Any]:
        """Export necessary runtime environment variables for running node commands.
        For example: {"ENV_NAME": value}
        """
        return _with_runtime_environment_variables(
            self.runtime_config, config=config)

    def get_runtime_services(self, cluster_config: Dict[str, Any]):
        return _get_runtime_services(self.runtime_config, cluster_config)

    @staticmethod
    def get_processes():
        return _get_runtime_processes()

    @staticmethod
    def get_dependencies():
        return [
            BUILT_IN_RUNTIME_NONE,
            BUILT_IN_RUNTIME_CONSUL,
        ]
